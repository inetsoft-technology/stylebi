{{#packageName}}package {{packageName}};{{/packageName}}

@javax.annotation.processing.Generated("inetsoft.cluster.apt.ClusterAnnotationProcessor")
@org.springframework.stereotype.Service
public class {{proxySimpleName}} {
{{#methods}}

   public static final class {{callableClassName}} implements org.apache.ignite.lang.IgniteCallable<{{{returnType}}}> {
   {{#parameters}}
      private final {{{value.internalType}}} {{value.name}};
   {{/parameters}}
      private final inetsoft.web.ServiceProxyContext serviceProxyContext = new inetsoft.web.ServiceProxyContext();

      public {{callableClassName}}({{#parameters}}{{^first}}, {{/first}}{{{value.type}}} {{value.name}}{{/parameters}}) {
      {{#parameters}}
         this.{{value.name}} = {{value.initializer}};
      {{/parameters}}
      }

      public {{{returnType}}} call() throws Exception {
         serviceProxyContext.preprocess();

         try {
            {{targetClass}} service = inetsoft.util.ConfigurationContext.getContext().getSpringBean({{targetClass}}.class);
            return service.{{name}}({{#parameters}}{{^first}}, {{/first}}{{value.getter}}{{/parameters}});
         }
         finally {
            serviceProxyContext.postprocess();
         }
      }
   }

   public {{{returnType}}} {{name}}({{#parameters}}{{^first}}, {{/first}}{{{value.type}}} {{value.name}}{{/parameters}}) {
      org.apache.ignite.Ignite ignite = ((inetsoft.sree.internal.cluster.ignite.IgniteCluster) inetsoft.sree.internal.cluster.Cluster.getInstance()).getIgniteInstance();
      {{callableClassName}} serviceProxyCallable = new {{callableClassName}}({{#parameters}}{{^first}}, {{/first}}{{value.name}}{{/parameters}});

      try {
         return ignite.compute().affinityCall("{{cacheName}}", {{keyParam}}, serviceProxyCallable);
      }
      finally {
         serviceProxyCallable.serviceProxyContext.apply();
      }
   }
{{/methods}}
}
