{{#packageName}}package {{packageName}};{{/packageName}}

@javax.annotation.processing.Generated("inetsoft.cluster.apt.ClusterAnnotationProcessor")
@org.springframework.stereotype.Service
public class {{proxySimpleName}} {
{{#methods}}

   public static final class {{callableClassName}} implements inetsoft.sree.internal.cluster.AffinityCallable<{{{returnType}}}> {
   {{#parameters}}
      {{#value.transferred}}private final {{{value.type}}} {{value.name}};{{/value.transferred}}
   {{/parameters}}
      private final inetsoft.web.ServiceProxyContext serviceProxyContext = new inetsoft.web.ServiceProxyContext();

      public {{callableClassName}}({{#parameters}}{{^first}}, {{/first}}{{{value.type}}} {{value.name}}{{/parameters}}) {
      {{#parameters}}
         {{#value.transferred}}this.{{value.name}} = {{value.name}};{{/value.transferred}}
      {{/parameters}}
      }

      public {{{returnType}}} call() throws Exception {
         serviceProxyContext.preprocess();

         try {
            {{targetClass}} service = inetsoft.util.ConfigurationContext.getContext().getSpringBean({{targetClass}}.class);
            return service.{{name}}({{#parameters}}{{^first}}, {{/first}}{{value.getter}}{{/parameters}});
         }
         finally {
            serviceProxyContext.postprocess();
         }
      }
   }

   public {{{returnType}}} {{name}}({{#parameters}}{{^first}}, {{/first}}{{{value.type}}} {{value.name}}{{/parameters}}){{#exceptions}}{{#first}} throws {{/first}}{{^first}}, {{/first}}{{value}}{{/exceptions}} {
      inetsoft.sree.internal.cluster.Cluster _cluster = inetsoft.sree.internal.cluster.Cluster.getInstance();
      {{#worksheetCache}}
      inetsoft.report.composition.WorksheetService _wsService = inetsoft.report.composition.WorksheetEngine.getWorksheetService();
      boolean _local = _wsService.isLocal({{keyParam}});
      {{/worksheetCache}}
      {{^worksheetCache}}
      boolean _local = _cluster.isLocalCacheKey("{{cacheName}}", {{keyParam}}) || _cluster.isLocalCall();
      {{/worksheetCache}}

      if(_local) {
         {{targetClass}} _service = inetsoft.util.ConfigurationContext.getContext().getSpringBean({{targetClass}}.class);
         return _service.{{name}}({{#parameters}}{{^first}}, {{/first}}{{value.name}}{{/parameters}});
      }

      {{callableClassName}} _serviceProxyCallable = new {{callableClassName}}({{#parameters}}{{^first}}, {{/first}}{{value.name}}{{/parameters}});

      try {
         {{#worksheetCache}}
         return _wsService.affinityCall({{keyParam}}, _serviceProxyCallable);
         {{/worksheetCache}}
         {{^worksheetCache}}
         return _cluster.affinityCall("{{cacheName}}", {{keyParam}}, _serviceProxyCallable);
         {{/worksheetCache}}
      }
      finally {
         _serviceProxyCallable.serviceProxyContext.apply();
      }
   }

   public java.util.concurrent.Future<{{{returnType}}}> {{name}}Async({{#parameters}}{{^first}}, {{/first}}{{{value.type}}} {{value.name}}{{/parameters}}){{#exceptions}}{{#first}} throws {{/first}}{{^first}}, {{/first}}{{value}}{{/exceptions}} {
      inetsoft.sree.internal.cluster.Cluster _cluster = inetsoft.sree.internal.cluster.Cluster.getInstance();
      {{#worksheetCache}}
      inetsoft.report.composition.WorksheetService _wsService = inetsoft.report.composition.WorksheetEngine.getWorksheetService();
      {{/worksheetCache}}

      {{callableClassName}} _serviceProxyCallable = new {{callableClassName}}({{#parameters}}{{^first}}, {{/first}}{{value.name}}{{/parameters}});

      try {
         {{#worksheetCache}}
         return _wsService.affinityCallAsync({{keyParam}}, _serviceProxyCallable);
         {{/worksheetCache}}
         {{^worksheetCache}}
         return _cluster.affinityCallAsync("{{cacheName}}", {{keyParam}}, _serviceProxyCallable);
         {{/worksheetCache}}
      }
      finally {
         _serviceProxyCallable.serviceProxyContext.apply();
      }
   }
{{/methods}}
}
